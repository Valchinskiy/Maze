#include <iostream>
#include <vector>
#include <conio.h>
#include <windows.h>
#include <ctime>

// Чистка
#define clear system("cls");

	//Новае строки
#define Enter "\n"				//Новая строка x 1
#define EnterX2 "\n\n"			//Новая строка x 2
#define EnterX4 "\n\n\n\n"		//Новая строка x 4

	//Табуляции

#define tab "\t"							//Табуляция x 1
#define tabX2 "\t\t"						//Табуляция x 2
#define tabX3 "\t\t\t"						//Табуляция x 3
#define tabX6 "\t\t\t\t\t\t"				//Табуляция x 6
#define tabX12 "\t\t\t\t\t\t\t\t\t\t\t\t"	//Табуляция x 12
#define tabX13 "\t\t\t\t\t\t\t\t\t\t\t\t\t"	//Табуляция х 13

	// Цвета и их возврат в исходную:

	// Яркие цвета
#define light_red "\x1b[31m"		//Ярко_красный
#define light_green "\x1b[32m"		//Ярко_красный
#define light_yellow "\x1b[33m"		//Ярко_красный
#define light_blue "\x1b[34m"		//Ярко_красный
#define light_purple "\x1b[35m"		//Ярко_красный
#define light_turquoise "\x1b[36m"	//Ярко_красный

#define mig "\x1b[5m"	//мигание строки


	//Просто цвета
#define red "\x1b[91m"			// Красный
#define green "\x1b[92m"		// Зелёный
#define yellow "\x1b[93m"		// Жёлтый
#define blue "\x1b[94m"			// Синий
#define purple "\x1b[95m"		// Пурпл
#define turquoise "\x1b[96m"	// Бирюзовый
#define grey "\x1b[90m"			// серый
#define reset "\x1b[0m"			// - Цвет

	//Сообщение при выходе
#define escape "Вы вышли из канавы астронавта"

	//Сообщение при ударе
#define death "Вы ударились бошкой об стену"

	//Сообщение при смерти
#define damage "Вы словили плюшку в лицо"

	//Игра
#define game "Игра"

using namespace std;

void cls(int x, int y) {			//установка курсора на позицию  x y
	COORD coord;    coord.X = x;
	coord.Y = y;    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
};

int main() {
	setlocale(0, "");

	//Жизни
	int health = 3;

	//Ломка фармилки очков
	int point = 0;

start:

	clock_t t1 = clock();

	bool hit = false;
	bool door = false;

	//Исходная точка маркера
	int userX1 = 15;
	int userY1 = 15;

	int map[31][31] = {
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,3,},
		{1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,},
		{4,0,0,5,0,0,1,0,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,0,1,0,0,0,1,},
		{1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,1,},
		{1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,5,0,1,0,0,0,1,},
		{1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,0,0,1,1,0,0,1,1,0,0,0,1,},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,},
		{1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,0,0,0,1,},
		{1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,},
		{1,0,1,1,5,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,},
		{1,0,1,5,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,0,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,0,0,1,5,1,0,1,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
	};

	/*------------------------------------------------------------------------------------------------------------------------*/

	while (true) {

		cls(0, 0);
		cout << tabX6 << yellow << game << reset
			<< EnterX2 << tabX12 << red << (char)3 << reset << ": " << green << health << reset
			<< tab << light_green << (char)164 << reset << ": " << light_blue << point << reset << EnterX4;

		/*------------------------------------------------------------------------------------------------------------------------*/

		for (int y = 0; y < 31; y++) {
			cout << tabX3;
			for (int x = 0; x < 31; x++) {
				if (map[y][x] == 0) {				//Ходы
					cout << grey << " ." << reset;
				}
				else if (map[y][x] == 1) {			//Стены - 1/4
					cout << light_red << " #" << reset;
				}
				else if (map[y][x] == 2) {			//Маркер игрока
					cout << light_turquoise << " " << (char)2 << reset;
				}
				else if (map[y][x] == 3) {			//Дверь на выход
					cout << light_blue << " |" << reset;
				}
				else if (map[y][x] == 4) {
					cout << light_red << " |" << reset;
				}
				else if (map[y][x] == 5) {
					cout << purple << " " << (char)23 << reset;
				}
			}
			cout << Enter;
		}

		/*------------------------------------------------------------------------------------------------------------------------*/

		//Условия прохождения игры


		if (map[9][3] == 2) {
			point = point + 1;
		}
		else if (map[16][4] == 2) {
			point = point + 1;
		}
		else if (map[17][3] == 2) {
			point = point + 1;
		}
		else if (map[19][4] == 2) {
			point = point + 1;
		}
		else if (map[19][8] == 2) {
			point = point + 1;
		}
		else if (map[11][24] == 2) {
			point = point + 1;
		}

		if (point != 6 && map[userY1][userX1 + 1] == 3) {
			door = false;
			cout << "Дверь закрыта";
			if (map[userY1][userX1 + 1] == 3) {

			}
		}
		else {
			door = true;
		}




		/*------------------------------------------------------------------------------------------------------------------------*/

		// Damage - возврат в исходную

		if (hit) {
			cout << EnterX2 << tabX2 << turquoise << damage << reset;
			Sleep(500);
			health = health - 1;
			point = 0;
			goto start;

		}

		/*------------------------------------------------------------------------------------------------------------------------*/

		//Условия проигрыша

		if (health == 0) {
			clear;
			cout << EnterX4 << tabX6 << light_red << "ВЫ СГОРЕЛИ" << reset;
			Sleep(500);

			clock_t t3 = clock();
			cout << tabX6 << light_yellow << "Время прохождения : " << reset << red << (double)(t3 - t1) / CLOCKS_PER_SEC << " сек." << reset;
			Sleep(1000);

			return 0;
		}

		/*------------------------------------------------------------------------------------------------------------------------*/

		// Движение маркера
		switch (_getch()) {
		case 'w':
		case 'W':
			if (map[userY1 - 1][userX1] != 6 && map[userY1 - 1][userX1] != 1) {
				hit = false;
				map[userY1][userX1] = 0;
				map[--userY1][userX1] = 2;
			}
			else {
				hit = true;
			}
			break;

		case 'a':
		case 'A':
			if (map[userY1][userX1 - 1] != 6 && map[userY1][userX1 - 1] != 1 && map[userY1][userX1 - 1] != 20) {
				hit = false;
				map[userY1][userX1] = 0;
				map[userY1][--userX1] = 2;
			}
			else {
				hit = true;
			}
			break;

		case's':
		case'S':
			if (map[userY1 + 1][userX1] != 6 && map[userY1 + 1][userX1] != 1 && map[userY1 + 1][userX1] != 10 && map[userY1 + 1][userX1] != 20) {
				hit = false;
				map[userY1][userX1] = 0;
				map[++userY1][userX1] = 2;
			}
			else {
				hit = true;
			}
			break;

		case 'd':
		case 'D':
			if (map[userY1][userX1 + 1] != 6 && map[userY1][userX1 + 1] != 1 && map[userY1][userX1 + 1] != 10 && map[userY1][userX1 + 1] != 20) {
				hit = false;
				map[userY1][userX1] = 0;
				map[userY1][++userX1] = 2;
			}
			else {
				hit = true;
			}
			break;

			//space - для восстановления исходной точки
		case 32:
			goto start;
			break;

			//esc - для выхода из игры
		case 27:
			goto exit;
			break;
		}

	}

	int _;
	cin >> _;

exit:

	if (clock_t t2 = clock()) {
		cout << EnterX2 << tabX12 << light_yellow << escape << reset << EnterX2;
		Sleep(500);
	}
	else {
		clock_t t5 = clock();
		cout << tabX12 << light_yellow << "Время прохождения : " << reset << red << (double)(t5 - t1) / CLOCKS_PER_SEC << " сек." << reset;
	}
	return 1;
}


//ДОДЕЛАТЬ ДВЕРЬ В MAP[5][23]!!!!